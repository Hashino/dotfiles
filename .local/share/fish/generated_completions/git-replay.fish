# git-replay
# Autogenerated from man page /usr/share/man/man1/git-replay.1.gz
complete -c git-replay -l onto -d 'Starting point at which to create the new commits'
complete -c git-replay -l advance -d 'Starting point at which to create the new commits; must be a branch name'
complete -c git-replay -o '<number>' -s n -l max-count -d 'Limit the number of commits to output'
complete -c git-replay -l skip -d 'Skip number commits before starting to show the commit output'
complete -c git-replay -l since -l after -d 'Show commits more recent than a specific date'
complete -c git-replay -l since-as-filter -d 'Show all commits more recent than a specific date'
complete -c git-replay -l until -l before -d 'Show commits older than a specific date'
complete -c git-replay -l author -l committer -d 'Limit the commits output to ones with author/committer header lines that matc…'
complete -c git-replay -l grep-reflog -d 'Limit the commits output to ones with reflog entries that match the specified…'
complete -c git-replay -l grep -d 'Limit the commits output to ones with a log message that matches the specifie…'
complete -c git-replay -l all-match -d 'Limit the commits output to ones that match all given --grep, instead of ones…'
complete -c git-replay -l invert-grep -d 'Limit the commits output to ones with a log message that do not match the pat…'
complete -c git-replay -s i -l regexp-ignore-case -d 'Match the regular expression limiting patterns without regard to letter case'
complete -c git-replay -l basic-regexp -d 'Consider the limiting patterns to be basic regular expressions; this is the d…'
complete -c git-replay -s E -l extended-regexp -d 'Consider the limiting patterns to be extended regular expressions instead of …'
complete -c git-replay -s F -l fixed-strings -d 'Consider the limiting patterns to be fixed strings (don\'t interpret pattern a…'
complete -c git-replay -s P -l perl-regexp -d 'Consider the limiting patterns to be Perl-compatible regular expressions'
complete -c git-replay -l remove-empty -d 'Stop when a given path disappears from the tree'
complete -c git-replay -l merges -d 'Print only merge commits.  This is exactly the same as --min-parents=2'
complete -c git-replay -l no-merges -d 'Do not print commits with more than one parent'
complete -c git-replay -l min-parents -l max-parents -l no-min-parents -l no-max-parents -d 'Show only commits which have at least (or at most) that many parent commits'
complete -c git-replay -l first-parent -d 'When finding commits to include, follow only the first parent commit upon see…'
complete -c git-replay -l exclude-first-parent-only -d 'When finding commits to exclude (with a ^), follow only the first parent comm…'
complete -c git-replay -l not -d 'Reverses the meaning of the ^ prefix (or lack thereof) for all following revi…'
complete -c git-replay -l all -d 'Pretend as if all the refs in refs/, along with HEAD, are listed on the comma…'
complete -c git-replay -l branches -d 'Pretend as if all the refs in refs/heads are listed on the command line as <c…'
complete -c git-replay -l tags -d 'Pretend as if all the refs in refs/tags are listed on the command line as <co…'
complete -c git-replay -l remotes -d 'Pretend as if all the refs in refs/remotes are listed on the command line as …'
complete -c git-replay -l glob -d 'Pretend as if all the refs matching shell glob <glob-pattern> are listed on t…'
complete -c git-replay -l exclude -d 'Do not include refs matching <glob-pattern> that the next --all, --branches, …'
complete -c git-replay -l exclude-hidden -d 'Do not include refs that would be hidden by git-fetch, git-receive-pack or gi…'
complete -c git-replay -l reflog -d 'Pretend as if all objects mentioned by reflogs are listed on the command line…'
complete -c git-replay -l alternate-refs -d 'Pretend as if all objects mentioned as ref tips of alternate repositories wer…'
complete -c git-replay -l single-worktree -d 'By default, all working trees will be examined by the following options when …'
complete -c git-replay -l ignore-missing -d 'Upon seeing an invalid object name in the input, pretend as if the bad input …'
complete -c git-replay -l bisect -d 'Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it w…'
complete -c git-replay -l stdin -d 'In addition to getting arguments from the command line, read them from standa…'
complete -c git-replay -l cherry-mark -d 'Like --cherry-pick (see below) but mark equivalent commits with = rather than…'
complete -c git-replay -l cherry-pick -d 'Omit any commit that introduces the same change as another commit on the "oth…'
complete -c git-replay -l left-only -l right-only -d 'List only commits on the respective side of a symmetric difference, i. e'
complete -c git-replay -l cherry -d 'A synonym for --right-only --cherry-mark --no-merges; useful to limit the out…'
complete -c git-replay -s g -l walk-reflogs -d 'Instead of walking the commit ancestry chain, walk reflog entries from the mo…'
complete -c git-replay -l merge -d 'After a failed merge, show refs that touch files having a conflict and don\'t …'
complete -c git-replay -l boundary -d 'Output excluded boundary commits.  Boundary commits are prefixed with -'
complete -c git-replay -l simplify-by-decoration -d 'Commits that are referred by some branch or tag are selected'
complete -c git-replay -l show-pulls -d 'Include all commits from the default mode, but also any merge commits that ar…'
complete -c git-replay -l full-history -d 'Same as the default mode, but does not prune some history'
complete -c git-replay -l dense -d 'Only the selected commits are shown, plus some to have a meaningful history'
complete -c git-replay -l sparse -d 'All commits in the simplified history are shown'
complete -c git-replay -l simplify-merges -d 'Additional option to --full-history to remove some needless merges from the r…'
complete -c git-replay -l ancestry-path -d 'When given a range of commits to display (e. g.  commit1'
complete -c git-replay -l date-order -d 'Show no parents before all of its children are shown, but otherwise show comm…'
complete -c git-replay -l author-date-order -d 'Show no parents before all of its children are shown, but otherwise show comm…'
complete -c git-replay -l topo-order -d 'Show no parents before all of its children are shown, and avoid showing commi…'
complete -c git-replay -l reverse -d 'Output the commits chosen to be shown (see Commit Limiting section above) in …'
complete -c git-replay -l no-walk -d 'Only show the given commits, but do not traverse their ancestors'
complete -c git-replay -l do-walk -d 'Overrides a previous --no-walk'
complete -c git-replay -l pretty -l format -d 'Pretty-print the contents of the commit logs in a given format, where <format…'
complete -c git-replay -l abbrev-commit -d 'Instead of showing the full 40-byte hexadecimal commit object name, show a pr…'
complete -c git-replay -l no-abbrev-commit -d 'Show the full 40-byte hexadecimal commit object name'
complete -c git-replay -l oneline -d 'This is a shorthand for "--pretty=oneline --abbrev-commit" used together'
complete -c git-replay -l encoding -d 'Commit objects record the character encoding used for the log message in thei…'
complete -c git-replay -l expand-tabs -l expand-tabs -l no-expand-tabs -d 'Perform a tab expansion (replace each tab with enough spaces to fill to the n…'
complete -c git-replay -l notes -d 'Show the notes (see git-notes(1)) that annotate the commit, when showing the …'
complete -c git-replay -l no-notes -d 'Do not show notes'
complete -c git-replay -l show-notes-by-default -d 'Show the default notes unless options for displaying specific notes are given'
complete -c git-replay -l show-notes -l standard-notes -d 'These options are deprecated'
complete -c git-replay -l show-signature -d 'Check the validity of a signed commit object by passing the signature to gpg …'
complete -c git-replay -l relative-date -d 'Synonym for --date=relative'
complete -c git-replay -l date -d 'Only takes effect for dates shown in human-readable format, such as when usin…'
complete -c git-replay -l parents -d 'Print also the parents of the commit (in the form "commit parent. ")'
complete -c git-replay -l children -d 'Print also the children of the commit (in the form "commit child. ")'
complete -c git-replay -l left-right -d 'Mark which side of a symmetric difference a commit is reachable from'
complete -c git-replay -l graph -d 'Draw a text-based graphical representation of the commit history on the left …'
complete -c git-replay -l show-linear-break -d 'When --graph is not used, all history branches are flattened which can make i…'
complete -c git-replay -s 1 -d '(negative numbers denote no upper limit)'
complete -c git-replay -l indexed-objects
complete -c git-replay -l 'no-merges;' -d 'git log --cherry upstream. mybranch, similar to git cherry upstream mybranch'
complete -c git-replay -o local -d 'is appended to the format (e. g'
complete -c git-replay -l raw

