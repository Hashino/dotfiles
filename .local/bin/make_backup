#!/usr/bin/env bash


RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
ORANGE='\033[1;33m'
ORANGE_NORMAL='\033[1;33m'
NORMAL='\033[0;37m'
BOLD='\033[1;37m'

TITLE='\033[1;36m'
QUOTE='\033[4;36m'

RES_COL=100

spinner() {
  local -r pid="${1}"
  local -r delay='0.75'
  local spinstr='\|/-'
  local temp
  while ps a | awk '{print $1}' | grep -q "${pid}"; do
    temp="${spinstr#?}"
    printf " [%c]  " "${spinstr}"
    spinstr=${temp}${spinstr%"${temp}"}
    sleep "${delay}"
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
  wait $pid # capture exit code
  return $?
}


check_success () {
  if [ $? -eq 0 ]; then
    RES_COL=$(($(tput cols)-11))
    MOVE_TO_COL="printf \\033[${RES_COL}G"
    
    $MOVE_TO_COL
    printf "["
    printf $GREEN
    printf $" SUCCESS "
    printf $NORMAL
    printf "]"
    printf "\r"
  else
    error_line="install.log:$(wc -l $log_file | cut -f1 -d" ")"
    RES_COL=$(($(tput cols)-${#error_line}-11))

    MOVE_TO_COL="printf \\033[$((${RES_COL}-1))G"
    
    $MOVE_TO_COL
    printf $QUOTE
    printf $error_line
    printf $NORMAL
    printf " ["
    printf $RED
    printf $" FAILURE "
    printf $NORMAL
    printf "]"
    printf "\n\r"
    return 1
  fi
  rc=$?
  echo
  return $rc
}

read -r -p "Replace previous system backup with a new one? [Y/n]" response
response=${response,,} # tolower

if [[ $response =~ ^(y| ) ]] || [[ -z $response ]]; then
  echo -e -n 'deleting old backup'
  sudo btrfs subvolume delete /backup >> /dev/null 2>&1 & spinner $!
  check_success

  echo -e -n 'creating new backup'
  sudo btrfs subvolume snapshot / /backup >> /dev/null 2>&1 & spinner $!
  check_success
else
  echo 'no change was made'
fi
